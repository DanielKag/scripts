# !/bin/sh
context="42"
namespace="tb-viewer"
pod_name="thunderbolt-deploy-preview-ga-machine-node16-76f4d754c5-p666c"


selek_title() {
  echo " _          _                       _      _    "
  echo "| |        | |                     | |    | |   "
  echo "| | ___   _| |__   ___     ___  ___| | ___| | __"
  echo "| |/ / | | | '_ \\ / _ \\   / __|/ _ \\ |/ _ \\ |/ /"
  echo "|   <| |_| | |_) |  __/   \\__ \\  __/ |  __/   < "
  echo "|_|\\_\\\\__,_|_.__/ \___|   |___/\\___|_|\\___|_|\\_\\ v1.6"
}

title=$(selek_title)

export FZF_DEFAULT_OPTS='--bind esc:abort --layout reverse --ansi --separator=â•¸ --color=dark,separator:green,border:white --border rounded'

# Move to config file
namespaces_list='tb-viewer\nsite-assets\nviewer-server\nci' 

select_context() {
  kubectl config get-contexts | sort -r 2>&1 \
    | fzf --header-lines 1 --reverse \
          --bind "space:execute(kubectl config use-context {1} &>/dev/null)" \
          --bind "space:+reload(kubectl config get-contexts | sort -r)" \
          --bind "space:+first" \
          --prompt "Select Context: " \
              | tr -s ' ' | cut -d ' ' -f 2
}

select_namespace() {
    printf $namespaces_list | fzf --bind "tab:+reload(kubectl get ns -o name --context $context | cut -d/ -f2)" \
              --prompt "Select namespace: "

}

select_pod() {
  header=$'<Enter> - Go to options | <Tab> - Toggle describe'
  kubectl get pods -o wide -L version -n $namespace --context $context 2>&1 \
      | fzf --header-lines 1 \
      --exact \
      --prompt "Select pod: " \
      --header "$header" \
      --bind='tab:toggle-preview' \
      --preview-window down \
      --preview-window hidden \
      --preview "kubectl describe pod -n $namespace {1} --context $context"  \
        | cut -d\  -f 1
}

if [ -z "$context" ]; then
  context=$(select_context)

  if [ -z "$context" ]; then
    echo "No context selected"
    exit 0
  fi
fi

if [ -z "$namespace" ]; then
  namespace=$(select_namespace)
  if [ -z "$namespace" ]; then
    echo "No namespace selected"
    exit 0 
  fi
fi

if [ -z "$pod_name" ]; then
  pod_name=$(select_pod)
  if [ -z "$namespace" ]; then
    echo "No namespace selected"
    exit 0 
  fi
fi

selek_ssh() {
  if [ -n "$pod_name" ]; then
    kubectl --context $context -n $namespace exec -it $pod_name -- bash
  fi
}

selek_logs() {
  header=$'F - First | L - Last | <Tab> - Select | A - Select all'
  preview_command="printf {} | jq -C 2> /dev/null || echo {} | fold -s"
# preview_command="printf {} | jq | grep --color=always -E '{q}|$'"
 
  extra_args="$1"
  kubectl --context $context logs -n $namespace $pod_name $extra_args 2>&1 \
      | sed 's/%/$/g' \
      | fzf --bind 'L:last',F:first,A:select-all \
            --exact \
            --multi \
            --preview "$preview_command" \
            --header "$header" 
}

selek_copy() {
  printf $pod_name | pbcopy
}


menu_item() {
  printf '%s%s%-15s%s %s%s%s' "$MAGENTA" "$BOLD" "$1" "$NORMAL" "$GRAY" "$2" "$NORMAL"
  echo
}

print_commands() {
  menu_item 'ssh' 'SSH to the machine' 
  menu_item 'logs' 'Get machine logs' 
  menu_item 'logs-to-file' 'Get machine logs and save them in logs.txt' 
  menu_item 'previous-logs' 'logs to the previous pod' 
  menu_item 'copy' 'Copy pod name' 
}

selek_run_command() {
  command=$1

  case $command in
    ssh)
      selek_ssh
      stay_in_selek=false
      ;;
    copy)
      selek_copy $pod_name
      ;;
    logs)
      selek_logs
      ;;
    logs-to-file)
      selek_logs > logs.txt
      ;;
    previous-logs)
      selek_logs --previous
      ;;
    *)
      printf "Wrong command $command"
      ;;
  esac
}

fzf_commands() {
  commands_header=$"Context: $context | Namespace: $namespace | Pod: $pod_name"
  fzf --ansi --exact --header "$commands_header" 
}

export stay_in_selek=true
while [ $stay_in_selek = true ]
do
  if [ -n "$pod_name" ]; then
        command=$(print_commands| fzf_commands)

        if [ -z "$command" ]; then
          exit 0
        fi

        selek_run_command $command 
  fi
done


  




